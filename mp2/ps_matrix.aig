| The vertical bar denotes comments. Ignore all input on lines containing ‘|’.
|
| The first non-comment line contains N, the number of nodes in the graph.
4
| The second optional non-comment line contains the unique start node
| and is terminated with an ‘S’.
| NB: The first node is 0, but this is not necessarily the start node.
0 S
| The third optional non-comment line contains a single goal node
| and is terminated with a ‘G’.
3 G
| The fourth non-comment line specifies J, the number of heuristics given.
| (You may ignore this unless you are doing the extra credit problem.)
1
| The fifth non-comment line starts the edge-cost data structure.
| Starting in 2017 two data structure types will be used: an adjacency list
| and an adjacency matrix (the original default).
| The next optional non-comment line begins with either #list or #matrix.
#matrix
| 1. If the line begins with #list, scan in an adjacency list: an array
| of linked neighbor sublists. The format of each line is
| neighbor_j.edge_cost_ij, with – denoting a link to the next neighbor.
| The NULL terminator is denoted !. Rows are indexed 0 to N-1.
| 2. For all other values of the fifth non-comment line, scan in an adjacency
| matrix: a square matrix A_ij of edge costs for the edge (i, j). Absent edges
| (with infinite cost) are denoted *. Rows are indexed 0 to N-1.|
| Example adjacency list:
| 0 - (1) 1 - 2 (2) - NULL
| 1 - 3 (5) - NULL
| 2 - 3 (1) - NULL
| 3 - NULL
|
| Example adjacency matrix:
* 1 2 *
* * * 5
* * * 1
* * * *
| After the adjacency matrix, the heuristic evaluation vectors are given,
| where each row containing the heuristic value h(n) for a node n
| The example below is not admissible. Why? Does it matter?
3
6
1
0
